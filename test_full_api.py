import requests
import json
import io

def test_upload_with_ai():
    """Test the /upload endpoint with AI processing enabled"""
    url = "http://127.0.0.1:9001/upload"
    
    # Create a comprehensive test document with resume-like content
    test_content = """
    NGUY·ªÑN VƒÇN ANH
    Software Engineer | Full-Stack Developer
    
    TH√îNG TIN LI√äN H·ªÜ:
    Email: nguyen.van.anh@email.com
    ƒêi·ªán tho·∫°i: +84-123-456-789
    ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM
    LinkedIn: linkedin.com/in/nguyenvananh
    
    T√ìM T·∫ÆT:
    K·ªπ s∆∞ ph·∫ßn m·ªÅm c√≥ 5 nƒÉm kinh nghi·ªám trong ph√°t tri·ªÉn ·ª©ng d·ª•ng web v√† mobile.
    Chuy√™n v·ªÅ Python, JavaScript, v√† c√°c framework hi·ªán ƒë·∫°i.
    
    KINH NGHI·ªÜM L√ÄM VI·ªÜC:
    
    Senior Software Engineer | Tech Company ABC (2022 - Hi·ªán t·∫°i)
    - Ph√°t tri·ªÉn v√† b·∫£o tr√¨ h·ªá th·ªëng backend s·ª≠ d·ª•ng Python/Django
    - Thi·∫øt k·∫ø API RESTful v√† microservices
    - L√†m vi·ªác v·ªõi Docker, Kubernetes, AWS
    - Qu·∫£n l√Ω team 3 developers junior
    
    Software Developer | StartUp XYZ (2020 - 2022)
    - Ph√°t tri·ªÉn ·ª©ng d·ª•ng web v·ªõi React.js v√† Node.js
    - T√≠ch h·ª£p payment gateway v√† third-party APIs
    - Optimization database performance (PostgreSQL, MongoDB)
    
    K·ª∏ NƒÇNG:
    
    Ng√¥n ng·ªØ l·∫≠p tr√¨nh: Python, JavaScript, TypeScript, Java
    Framework: Django, FastAPI, React.js, Vue.js, Express.js
    Database: PostgreSQL, MongoDB, Redis, MySQL
    Cloud & DevOps: AWS, Docker, Kubernetes, CI/CD
    Tools: Git, Jira, Figma, Postman
    
    H·ªåC V·∫§N:
    
    C·ª≠ nh√¢n Khoa h·ªçc M√°y t√≠nh | ƒê·∫°i h·ªçc B√°ch Khoa TP.HCM (2016 - 2020)
    - GPA: 8.5/10
    - ƒê·ªì √°n t·ªët nghi·ªáp: H·ªá th·ªëng qu·∫£n l√Ω h·ªçc t·∫≠p online
    
    CH·ª®NG CH·ªà:
    - AWS Certified Solutions Architect
    - Certified Kubernetes Administrator (CKA)
    - Google Cloud Professional Developer
    
    D·ª∞ √ÅN N·ªîI B·∫¨T:
    
    E-commerce Platform (2023)
    - X√¢y d·ª±ng platform th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ cho 10,000+ users
    - S·ª≠ d·ª•ng microservices architecture
    - Payment integration v·ªõi VNPay, MoMo
    
    AI Chatbot System (2022)
    - Ph√°t tri·ªÉn chatbot s·ª≠ d·ª•ng NLP v√† machine learning
    - T√≠ch h·ª£p v·ªõi Telegram, Facebook Messenger
    - X·ª≠ l√Ω 1000+ conversations/day
    """
    
    try:
        # Create a file-like object in memory
        file_content = test_content.encode('utf-8')
        files = {
            'file': ('resume_test.txt', io.BytesIO(file_content), 'text/plain')
        }
        
        print("üöÄ Testing API with AI processing...")
        print("üì§ Uploading test resume...")
        
        response = requests.post(url, files=files, timeout=30)
        
        print(f"‚úÖ Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("üìã API Response:")
            try:
                result = response.json()
                print(json.dumps(result, indent=2, ensure_ascii=False))
            except json.JSONDecodeError:
                print("Raw response:")
                print(response.text)
        else:
            print(f"‚ùå Error: {response.status_code}")
            print(response.text)
            
    except requests.exceptions.Timeout:
        print("‚è∞ Request timed out - AI processing may take some time")
    except requests.exceptions.ConnectionError:
        print("‚ùå Could not connect to server. Make sure it's running on http://127.0.0.1:9001")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def check_server_status():
    """Check if the server is responding"""
    try:
        response = requests.get("http://127.0.0.1:9001/docs", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Server is running and accessible")
            print("üìñ API Documentation: http://127.0.0.1:9001/docs")
            return True
        else:
            print(f"‚ö†Ô∏è  Server responded with status: {response.status_code}")
            return False
    except:
        print("‚ùå Server is not accessible")
        return False

if __name__ == "__main__":
    print("=== API-Hubs Full Functionality Test ===")
    print("Testing with Gemini AI enabled\n")
    
    print("1. Checking server status...")
    if check_server_status():
        print("\n2. Testing document upload and AI processing...")
        test_upload_with_ai()
    else:
        print("Server is not running. Please start the server first.")
    
    print("\n=== Test Complete ===")
    print("\nüí° Tips:")
    print("- The AI processing may take 10-30 seconds")
    print("- Try uploading PDF, DOC, or DOCX files for better results")
    print("- Check the API docs at http://127.0.0.1:9001/docs for interactive testing")
